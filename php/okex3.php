<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception as Exception; // a common import

class okex3 extends Exchange {

    public function describe () {
        return array_replace_recursive (parent::describe (), array (
            'id' => 'okex3',
            'name' => 'okex3',
            'countries' => array ( 'CN' ),
            'rateLimit' => 2000,
            'userAgent' => $this->userAgents['chrome39'],
            'version' => 'v3',
            'accounts' => null,
            'accountsById' => null,
            'hostname' => 'okex.com',
            'has' => array (
                'CORS' => false,
                'fetchDepositAddress' => false,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchClosedOrders' => true,
                'fetchOrder' => true,
                'fetchOrders' => true,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => false,
                'fetchTradingLimits' => false,
                'withdraw' => false,
                'fetchCurrencies' => false,
            ),
            'timeframes' => array (
                '1m' => 60,
                '3m' => 180,
                '5m' => 300,
                '15m' => 900,
                '30m' => 1800,
                '1h' => 3600,
                '1d' => 86400,
                '1w' => 604800,
            ),
            'urls' => array (
                'logo' => 'https://user-images.githubusercontent.com/1294454/27766791-89ffb502-5ee5-11e7-8a5b-c5950b68ac65.jpg',
                'api' => array (
                    'spot' => 'https://www.okex.com/api/spot/v3',
                    'account' => 'https://www.okex.com/api/account/v3',
                ),
                'www' => 'https://www.okex.com',
                'doc' => 'https://www.okex.com/docs/en',
                'fees' => 'https://www.okex.com/pages/products/fees.html',
            ),
            'api' => array (
                'spot' => array (
                    'get' => array (
                        'instruments',
                        'instruments/{id}/book',
                        'instruments/{id}/ticker',
                        'instruments/{id}/trades',
                        'orders/{id}',
                        'orders',
                        'orders_pending',
                        'instruments/{id}/candles',
                    ),
                    'post' => array (
                        'orders',
                        'cancel_orders/{id}',
                    ),
                ),
                'account' => array (
                    'get' => array (
                        'wallet',
                    ),
                ),
            ),
            'fees' => array (
                'trading' => array (
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => 0.001,
                    'taker' => 0.001,
                ),
            ),
            'limits' => array (
                'amount' => array ( 'min' => 0.01, 'max' => 100000 ),
            ),
            'options' => array (
                'createMarketBuyOrderRequiresPrice' => true,
                'limits' => array (),
            ),
            'exceptions' => array (
                '400' => '\\ccxt\\NotSupported', // Bad Request
                '401' => '\\ccxt\\AuthenticationError',
                '405' => '\\ccxt\\NotSupported',
                '429' => '\\ccxt\\DDoSProtection', // Too Many Requests, exceed api request limit
                '1002' => '\\ccxt\\ExchangeNotAvailable', // System busy
                '1016' => '\\ccxt\\InsufficientFunds',
                '3008' => '\\ccxt\\InvalidOrder',
                '6004' => '\\ccxt\\InvalidNonce',
                '6005' => '\\ccxt\\AuthenticationError', // Illegal API Signature
            ),
        ));
    }

    public function fetch_markets ($params = array ()) {
        $response = $this->spotGetInstruments ();
        $result = array ();
        $markets = $response;
        for ($i = 0; $i < count ($markets); $i++) {
            $market = $markets[$i];
            $id = $market['instrument_id'];
            $baseId = $market['base_currency'];
            $quoteId = $market['quote_currency'];
            $base = strtoupper ($baseId);
            $base = $this->common_currency_code($base);
            $quote = strtoupper ($quoteId);
            $quote = $this->common_currency_code($quote);
            $symbol = $base . '/' . $quote;
            $precision = array (
                'price' => $this->safe_float($market, 'tick_size'),
                'amount' => $this->safe_float($market, 'size_increment'),
            );
            $limits = array (
                'price' => array (
                    'min' => pow (10, -$precision['price']),
                    'max' => pow (10, $precision['price']),
                ),
            );
            $result[] = array (
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'active' => true,
                'precision' => $precision,
                'limits' => $limits,
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_balance ($params = array ()) {
        $this->load_markets();
        $response = $this->accountGetWallet ($params);
        $result = array ( 'info' => $response );
        $balances = $response;
        for ($i = 0; $i < count ($balances); $i++) {
            $balance = $balances[$i];
            $currencyId = $balance['currency'];
            $code = strtoupper ($currencyId);
            if (is_array ($this->currencies_by_id) && array_key_exists ($currencyId, $this->currencies_by_id)) {
                $code = $this->currencies_by_id[$currencyId]['code'];
            } else {
                $code = $this->common_currency_code($code);
            }
            $account = $this->account ();
            $account['free'] = floatval ($balance['available']);
            $account['total'] = floatval ($balance['balance']);
            $account['used'] = floatval ($balance['hold']);
            $result[$code] = $account;
        }
        return $this->parse_balance($result);
    }

    public function fetch_order_book ($symbol = null, $limit = 5, $params = array ()) {
        $this->load_markets();
        $request = array_merge (array (
            'symbol' => $this->market_id($symbol),
            'size' => $limit,
            'id' => $this->market_id($symbol),
        ), $params);
        $response = $this->spotGetInstrumentsIdBook ($request);
        $orderbook = $response;
        return $this->parse_order_book($orderbook, $orderbook['timestamp'], 'bids', 'asks', 0, 1);
    }

    public function fetch_ticker ($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $ticker = $this->spotGetInstrumentsIdTicker (array ( 'id' => $this->market_id($symbol) ));
        return $this->parse_ticker($ticker, $market);
    }

    public function parse_ticker ($ticker, $market = null) {
        $timestamp = $ticker['timestamp'];
        $last = $ticker['last'];
        return array (
            'symbol' => $market['symbol'],
            'timestamp' => $this->parse8601 ($timestamp),
            'datetime' => $this->iso8601 ($timestamp),
            'high' => $ticker['high_24h'],
            'low' => $ticker['low_24h'],
            'bid' => $ticker['bid'],
            'bidVolume' => null,
            'ask' => $ticker['ask'],
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $ticker['base_volume_24h'],
            'quoteVolume' => $ticker['quote_volume_24h'],
            'info' => $ticker,
        );
    }

    public function parse_trade ($trade, $market = null) {
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $datetime = $trade['time'];
        $side = strtolower ($trade['side']);
        $orderId = $this->safe_string($trade, 'trade_id');
        $price = $this->safe_float($trade, 'price');
        $amount = $this->safe_float($trade, 'size');
        $cost = $price * $amount;
        $fee = null;
        return array (
            'id' => $orderId,
            'info' => $trade,
            'timestamp' => $this->parse8601 ($datetime),
            'datetime' => $datetime,
            'symbol' => $symbol,
            'type' => null,
            'order' => $orderId,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        );
    }

    public function fetch_trades ($symbol, $since = null, $limit = 50, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'symbol' => $market['id'],
            'limit' => $limit,
            'id' => $market['id'],
        );
        $response = $this->spotGetInstrumentsIdTrades (array_merge ($request, $params));
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function create_order ($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        if ($type === 'market') {
            // for market buy it requires the $amount of quote currency to spend
            if ($side === 'buy') {
                if ($this->options['createMarketBuyOrderRequiresPrice']) {
                    if ($price === null) {
                        throw new InvalidOrder ($this->id . " createOrder() requires the $price argument with market buy orders to calculate total order cost ($amount to spend), where cost = $amount * $price-> Supply a $price argument to createOrder() call if you want the cost to be calculated for you from $price and $amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the $amount argument (the exchange-specific behaviour)");
                    } else {
                        $amount = $amount * $price;
                    }
                }
            }
        }
        $this->load_markets();
        $orderType = $type;
        $request = array (
            'instrument_id' => $this->market_id($symbol),
            'size' => $this->amount_to_precision($symbol, $amount),
            'side' => $side,
            'type' => $orderType,
        );
        if ($type === 'limit') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        } else {
            $request['notional'] = $this->amount_to_precision($symbol, $amount);
        }
        $result = $this->spotPostOrders (array_merge ($request, $params));
        return array (
            'info' => $result,
            'id' => $result['order_id'],
        );
    }

    public function cancel_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $params['instrument_id'] = $this->market ($symbol)['id'];
        $response = $this->spotPostCancelOrdersId (array_merge (array (
            'id' => $id,
        ), $params));
        $order = $this->parse_order($response);
        return array_merge ($order, array (
            'id' => $id,
            'status' => 'canceled',
        ));
    }

    public function parse_order_status ($status) {
        $statuses = array (
            'open' => 'open',
            'ordering' => 'open',
            'canceled' => 'canceled',
            'cancelled' => 'canceled',
            'canceling' => 'canceled',
            'part_filled' => 'open',
            'filled' => 'closed',
            'failure' => 'canceled',
        );
        if (is_array ($statuses) && array_key_exists ($status, $statuses)) {
            return $statuses[$status];
        }
        return $status;
    }

    public function parse_order ($order, $market = null) {
        $id = $this->safe_string($order, 'order_id');
        $side = $this->safe_string($order, 'side');
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $symbol = null;
        if ($market === null) {
            $marketId = $this->safe_string($order, 'instrument_id');
            if (is_array ($this->markets_by_id) && array_key_exists ($marketId, $this->markets_by_id)) {
                $market = $this->markets_by_id[$marketId];
            }
        }
        $orderType = $this->safe_string($order, 'type');
        $timestamp = $this->safe_string($order, 'timestamp');
        $timestamp = $this->parse8601 ($timestamp);
        $amount = $this->safe_float($order, 'size');
        $filled = $this->safe_float($order, 'filled_size');
        $remaining = null;
        $price = $this->safe_float($order, 'price');
        $cost = $this->safe_float($order, 'filled_notional');
        if ($filled !== null) {
            if ($amount !== null) {
                $remaining = $amount - $filled;
            }
            if ($cost === null) {
                if ($price !== null) {
                    $cost = $price * $filled;
                }
            } else if (($cost > 0) && ($filled > 0)) {
                $price = $cost / $filled;
            }
        }
        $feeCurrency = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
            $feeCurrency = ($side === 'buy') ? $market['base'] : $market['quote'];
        }
        $feeCost = 0;
        $result = array (
            'info' => $order,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $orderType,
            'side' => $side,
            'price' => $price,
            'cost' => $cost,
            'amount' => $amount,
            'remaining' => $remaining,
            'filled' => $filled,
            'average' => null,
            'status' => $status,
            'fee' => array (
                'cost' => $feeCost,
                'currency' => $feeCurrency,
            ),
            'trades' => null,
        );
        return $result;
    }

    public function fetch_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array_merge (array (
            'instrument_id' => $this->market ($symbol)['id'],
            'id' => $id,
        ), $params);
        $response = $this->spotGetOrdersId ($request);
        return $this->parse_order($response);
    }

    public function fetch_open_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $symbol = $this->market ($symbol)['id'];
        $result = $this->spotGetOrdersPending ($symbol, $since, $limit);
        return $this->parse_orders($result);
    }

    public function fetch_closed_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $result = $this->fetch_orders($symbol, $since, $limit, array ( 'status' => 'filled' ));
        return $result;
    }

    public function fetch_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'instrument_id' => $market['id'],
            'status' => 'all',
        );
        if ($limit !== null)
            $request['limit'] = $limit;
        $response = $this->spotGetOrders (array_merge ($request, $params));
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function parse_ohlcv ($ohlcv, $market = null, $timeframe = '1m', $since = null, $limit = null) {
        return [
            $this->parse8601 ($ohlcv[0]),
            $ohlcv[1],
            $ohlcv[2],
            $ohlcv[3],
            $ohlcv[4],
            $ohlcv[5],
        ];
    }

    public function fetch_ohlcv ($symbol, $timeframe = '1m', $since = null, $limit = 100, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array_merge (array (
            'id' => $market['id'],
            'granularity' => $this->timeframes[$timeframe],
        ), $params);
        if ($since) {
            $request['start'] = $this->iso8601 ($since);
        }
        $response = $this->spotGetInstrumentsIdCandles ($request);
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function nonce () {
        return $this->milliseconds ();
    }

    public function sign ($path, $api = 'spot', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $request = '/';
        $request .= $this->implode_params($path, $params);
        $query = $this->omit ($params, $this->extract_params($path));
        $url = $this->urls['api'][$api] . $request;
        // var_dump($path, $request, $url)
        $nonce = (string) $this->nonce ();
        $timestamp = $this->iso8601 ($nonce) || '';
        $payloadPath = str_replace ($this->urls['www'], '', $url);
        $payload = $timestamp . $method;
        if ($payloadPath) {
            $payload .= $payloadPath;
        }
        if ($method === 'GET') {
            if ($query) {
                $url .= '?' . $this->urlencode ($query);
                $payload .= '?' . $this->urlencode ($query);
            }
        } else {
            $payload .= $this->json ($query);
            $body = $this->json ($query);
        }
        $signature = '';
        if ($payload && $this->secret) {
            $signature = $this->hmac ($payload, $this->secret, 'sha256', 'base64');
        }
        $headers = array (
            'OK-ACCESS-KEY' => $this->apiKey,
            'OK-ACCESS-SIGN' => $this->decode ($signature),
            'OK-ACCESS-TIMESTAMP' => $timestamp,
            'OK-ACCESS-PASSPHRASE' => $this->password,
            'Content-Type' => 'application/json',
        );
        return array ( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
